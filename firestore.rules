rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Load roles from the user's profile document rather than custom claims
    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    function hasUserRole(role) {
      return isAuthenticated() && userDoc().roles != null && (role in userDoc().roles);
    }

  // Dev bypass removed for single-project production deployment
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParentOf(camperId) {
      // TODO: Implement parent relationship check (guardian -> parent renaming)
      // This should verify that the authenticated user is a parent of the specific camper
  return isAuthenticated() &&
     exists(/databases/$(database)/documents/guardianships/$(request.auth.uid + '_' + camperId));
    }

    // User profiles - explicit create by owner to avoid any recursion on first write
    match /users/{userId} {
      allow create: if isOwner(userId);
      // For reads/updates/deletes, allow owner; admins can manage other users
      allow read, update, delete: if isOwner(userId) || (isAuthenticated() && userId != request.auth.uid && hasUserRole('admin'));
    }

    // Camper records - restricted access based on roles
    match /campers/{camperId} {
  // Parents can only access their own campers
  allow read, update, delete: if isParentOf(camperId);
  // Allow parents to create their camper if they mark themselves as creator
  allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;

      // Hired staff (elevated) can read all campers; only admins can write
      allow read: if hasUserRole('staff_hired') || hasUserRole('admin');
      allow write: if hasUserRole('admin');
    }

    // Medical records - highly restricted access
    match /medical_records/{recordId} {
      // Only medical staff and admins can access medical records
      allow read, write: if hasUserRole('medic') || hasUserRole('admin');
      
      // Guardians can read their own camper's medical records
      allow read: if isParentOf(resource.data.camperId);
    }

    // Medication administration records (MAR)
    match /medication_logs/{logId} {
      // Only medical staff can create/update medication logs
      allow read, write: if hasUserRole('medic') || hasUserRole('admin');
      
      // Guardians can read logs for their campers
      allow read: if isParentOf(resource.data.camperId);
    }

    // Photo galleries - permission-based access
    match /photos/{photoId} {
      // TODO: Implement photo permission system
      // Photos should be accessible based on explicit permissions
      allow read: if hasUserRole('staff_hired') || hasUserRole('admin');
      allow write: if hasUserRole('staff_hired') || hasUserRole('admin');
    }

    // Payment records - sensitive financial data
    match /payments/{paymentId} {
  // Parents can see their own payments
  allow read: if isOwner(resource.data.parentId);
  // Admins manage payments; baseline staff cannot write
  allow read, write: if hasUserRole('admin');
    }

    // Reports and analytics - restricted to staff
    match /reports/{reportId} {
      allow read, write: if hasUserRole('admin') || hasUserRole('staff_hired');
    }

    // System configuration - admin only
    match /config/{configId} {
      allow read, write: if hasUserRole('admin');
    }

    // Sessions: public read; admin-only write; registrations controlled separately
    match /sessions/{year} {
      allow read: if true;
      allow write: if hasUserRole('admin');
      match /{gender}/{sessionId} {
        allow read: if true;
        allow write: if hasUserRole('admin');
        match /registrations/{regId} {
          allow create: if isAuthenticated() && request.resource.data.parentId == request.auth.uid;
          allow read: if isAuthenticated() && resource.data.parentId == request.auth.uid;
          allow read: if hasUserRole('admin') || hasUserRole('staff_hired');
          allow write: if hasUserRole('admin');
        }
      }
    }

    // Guardian-camper relationships
    match /guardianships/{relationshipId} {
  allow read: if isOwner(resource.data.guardianId) || hasUserRole('admin') || hasUserRole('staff_hired');
  // Allow a parent to create their own guardianship record linking to a camper
  allow create: if isAuthenticated() && request.resource.data.guardianId == request.auth.uid;
  // Admins can manage
  allow write: if hasUserRole('admin');
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
TODO: Security rules refinement needed:
1. Implement proper guardian-camper relationship verification
2. Add photo permission system with explicit consent
3. Implement audit logging for sensitive data access
4. Add rate limiting for API calls
5. Validate data structure and required fields
6. Add emergency access protocols for medical staff
7. Implement session validation and token refresh
8. Add GDPR compliance for data deletion requests
*/