rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             request.auth.token.get(role, false) == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isGuardianOf(camperId) {
      // TODO: Implement guardian relationship check
      // This should verify that the authenticated user is a guardian of the specific camper
      return isAuthenticated() && 
             hasRole('guardian') &&
             exists(/databases/$(database)/documents/guardianships/$(request.auth.uid + '_' + camperId));
    }

    // User profiles - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if hasRole('admin') || hasRole('staff');
    }

    // Camper records - restricted access based on roles
    match /campers/{camperId} {
      // Guardians can only access their own campers
      allow read, write: if isGuardianOf(camperId);
      
      // Staff can read all campers, write with additional verification
      allow read: if hasRole('staff') || hasRole('admin');
      allow write: if hasRole('admin');
    }

    // Medical records - highly restricted access
    match /medical_records/{recordId} {
      // Only medical staff and admins can access medical records
      allow read, write: if hasRole('medic') || hasRole('admin');
      
      // Guardians can read their own camper's medical records
      allow read: if isGuardianOf(resource.data.camperId);
    }

    // Medication administration records (MAR)
    match /medication_logs/{logId} {
      // Only medical staff can create/update medication logs
      allow read, write: if hasRole('medic') || hasRole('admin');
      
      // Guardians can read logs for their campers
      allow read: if isGuardianOf(resource.data.camperId);
    }

    // Photo galleries - permission-based access
    match /photos/{photoId} {
      // TODO: Implement photo permission system
      // Photos should be accessible based on explicit permissions
      allow read: if hasRole('staff') || hasRole('admin');
      allow write: if hasRole('staff') || hasRole('admin');
    }

    // Payment records - sensitive financial data
    match /payments/{paymentId} {
      // Guardians can only see their own payments
      allow read: if isOwner(resource.data.guardianId);
      
      // Admin and staff can manage payments
      allow read, write: if hasRole('admin');
      allow read: if hasRole('staff');
    }

    // Reports and analytics - restricted to staff
    match /reports/{reportId} {
      allow read, write: if hasRole('admin') || hasRole('staff');
    }

    // System configuration - admin only
    match /config/{configId} {
      allow read, write: if hasRole('admin');
    }

    // Guardian-camper relationships
    match /guardianships/{relationshipId} {
      allow read: if isOwner(resource.data.guardianId) || hasRole('admin') || hasRole('staff');
      allow write: if hasRole('admin');
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
TODO: Security rules refinement needed:
1. Implement proper guardian-camper relationship verification
2. Add photo permission system with explicit consent
3. Implement audit logging for sensitive data access
4. Add rate limiting for API calls
5. Validate data structure and required fields
6. Add emergency access protocols for medical staff
7. Implement session validation and token refresh
8. Add GDPR compliance for data deletion requests
*/