name: Deploy Functions (Default codebase)

on:
  # Manual deployment only to avoid accidental deploys on push
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - dev
          - staging
          - prod

concurrency:
  group: deploy-functions-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'prod' }}
    permissions:
      contents: read
      id-token: write

    # Skip deployment for pull requests
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # IMPORTANT: Do NOT enable Yarn caching here (it invokes yarn before Corepack)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # Ensure Yarn 4 is used by this job and all subprocesses (including Firebase CLI)
      - name: Enable Corepack and pin Yarn 4.1.0
        shell: bash
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare yarn@4.1.0 --activate
          corepack --version || true
          corepack yarn --version

      # Force every 'yarn' invocation (even from Firebase CLI) to go through Corepack/Yarn 4
      - name: Create Yarn shim (routes to Corepack)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/bin"
          cat > "$HOME/bin/yarn" <<'EOF'
          #!/usr/bin/env bash
          exec corepack yarn "$@"
          EOF
          chmod +x "$HOME/bin/yarn"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          hash -r
          echo "Yarn resolution order (shim should be first):"
          which -a yarn || true
          yarn --version

      # Optional recommendation: Use node-modules linker to avoid PnP issues with tooling
      - name: Configure Yarn linker (node-modules)
        working-directory: kateri-monorepo
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .yarnrc.yml ]; then
            if grep -q '^nodeLinker:' .yarnrc.yml; then
              sed -i.bak 's/^nodeLinker:.*/nodeLinker: node-modules/' .yarnrc.yml
            else
              printf "\nnodeLinker: node-modules\n" >> .yarnrc.yml
            fi
          else
            printf "nodeLinker: node-modules\n" > .yarnrc.yml
          fi
          echo "Configured Yarn nodeLinker:"
          grep '^nodeLinker:' .yarnrc.yml || true

      # Cache Yarn 4 offline artifacts AFTER Corepack/shim is in place
      - name: Cache Yarn artifacts
        uses: actions/cache@v4
        with:
          path: |
            kateri-monorepo/.yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('kateri-monorepo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        working-directory: kateri-monorepo
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: "true"
        run: yarn install --immutable

      - name: Build functions
        working-directory: kateri-monorepo
        run: yarn workspace @kateri/functions build

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          token_format: access_token
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform

      - name: Set Firebase project alias
        run: |
          case "${{ inputs.environment || 'prod' }}" in
            dev) firebase use dev ;;
            staging) firebase use staging ;;
            prod) firebase use prod ;;
          esac

      # Quick sanity check right before deploy
      - name: Debug Yarn before deploy
        shell: bash
        run: |
          echo "PATH=$PATH"
          which -a yarn || true
          yarn --version || true
          echo "corepack which yarn:"
          corepack which yarn || true

      - name: Deploy Firestore rules and indexes (keyless)
        shell: bash
        run: |
          firebase deploy --only firestore:rules,firestore:indexes --non-interactive

      - name: Deploy Functions (keyless)
        shell: bash
        run: |
          firebase deploy --only functions --non-interactive

      - name: Post deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment to ${{ inputs.environment || 'prod' }} completed successfully"
          else
            echo "‚ùå Deployment to ${{ inputs.environment || 'prod' }} failed"
            exit 1
          fi

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üöÄ Functions deployed successfully to ${{ inputs.environment || 'prod' }}"
          else
            echo "üí• Function deployment failed"
          fi
