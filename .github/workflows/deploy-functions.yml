name: Deploy Firebase Functions

on:
  workflow_dispatch: {}
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/deploy-functions.yml"
      - "kateri-monorepo/**"
      - "firebase.json"
      - ".firebaserc"
      - "firestore.rules"
      - "firestore.indexes.json"

concurrency:
  group: deploy-functions-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: kcm-firebase-b7d6a
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure no legacy FIREBASE_TOKEN is set
        run: |
          echo "FIREBASE_TOKEN=" >> "$GITHUB_ENV"
          if [ -n "${FIREBASE_TOKEN:-}" ]; then echo "FIREBASE_TOKEN was set; cleared"; else echo "FIREBASE_TOKEN not set"; fi

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential python3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Enable Corepack and pin Yarn 4.1.0
        run: |
          set -euxo pipefail
          corepack enable
          corepack prepare yarn@4.1.0 --activate
          yarn --version

      - name: Ensure Yarn nodeLinker (node-modules)
        working-directory: kateri-monorepo
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .yarnrc.yml ]; then
            if grep -q '^nodeLinker:' .yarnrc.yml; then
              sed -i.bak 's/^nodeLinker:.*/nodeLinker: node-modules/' .yarnrc.yml
            else
              printf "\nnodeLinker: node-modules\n" >> .yarnrc.yml
            fi
          else
            printf "nodeLinker: node-modules\n" > .yarnrc.yml
          fi
          grep '^nodeLinker:' .yarnrc.yml || true

      - name: Cache Yarn artifacts
        uses: actions/cache@v4
        with:
          path: |
            kateri-monorepo/.yarn/cache
          key: ${{ runner.os }}-yarn4-${{ hashFiles('kateri-monorepo/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn4-

      - name: Install dependencies
        working-directory: kateri-monorepo
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: "true"
        run: yarn install --immutable

      - name: Validate WIF inputs
        run: |
          if [ -z "${GCP_WORKLOAD_IDENTITY_PROVIDER}" ] || [ -z "${GCP_SERVICE_ACCOUNT_EMAIL}" ]; then
            echo "Missing GCP_WORKLOAD_IDENTITY_PROVIDER or GCP_SERVICE_ACCOUNT_EMAIL secrets." >&2
            exit 1
          fi

      - name: Authenticate to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ env.PROJECT_ID }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Sanity check auth context (ADC via gcloud)
        shell: bash
        run: |
          set -euo pipefail
          gcloud config set project "$PROJECT_ID" >/dev/null
          echo "gcloud account:" $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
          # Ensure ADC works by fetching an access token
          gcloud auth print-access-token >/dev/null
          echo "ADC usable via gcloud"

      - name: Validate required IAM roles and bindings (preflight)
        shell: bash
        run: |
          set -euo pipefail
          gcloud config set project "$PROJECT_ID" >/dev/null
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          CLOUDBUILD_SA="${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com"

          echo "Checking project-level roles for ${GCP_SERVICE_ACCOUNT_EMAIL}..."
          POLICY=$(gcloud projects get-iam-policy "$PROJECT_ID" --format=json)
          check_role() {
            local ROLE="$1"
            if echo "$POLICY" | grep -q "\"$ROLE\"" && echo "$POLICY" | grep -q "serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}"; then
              echo "✓ $ROLE"
            else
              echo "MISSING: $ROLE"
              MISSING_ROLES+="$ROLE\n"
            fi
          }
          MISSING_ROLES=""
          check_role roles/artifactregistry.admin
          check_role roles/cloudfunctions.developer
          check_role roles/run.admin
          check_role roles/cloudbuild.builds.editor
          check_role roles/datastore.user
          check_role roles/secretmanager.viewer
          check_role roles/secretmanager.secretAccessor

          echo "Checking SA User binding on runtime SA (${RUNTIME_SA})..."
          if gcloud iam service-accounts get-iam-policy "$RUNTIME_SA" --format=json >/tmp/rt.json 2>/dev/null; then
            if grep -q "roles/iam.serviceAccountUser" /tmp/rt.json && grep -q "serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}" /tmp/rt.json; then
              echo "✓ roles/iam.serviceAccountUser on ${RUNTIME_SA}"
            else
              echo "MISSING: roles/iam.serviceAccountUser on ${RUNTIME_SA} for ${GCP_SERVICE_ACCOUNT_EMAIL}"
              MISSING_RT_SA=1
            fi
          else
            echo "WARN: Could not read IAM policy for ${RUNTIME_SA} (insufficient permissions to view)."
            MISSING_RT_SA=1
          fi

          echo "Checking Cloud Build SA Artifact Registry writer..."
          if echo "$POLICY" | grep -q "roles/artifactregistry.writer" && echo "$POLICY" | grep -q "serviceAccount:${CLOUDBUILD_SA}"; then
            echo "✓ ${CLOUDBUILD_SA} has roles/artifactregistry.writer"
          else
            echo "WARN: ${CLOUDBUILD_SA} missing roles/artifactregistry.writer (build may fail to push images)."
            MISSING_CLOUD_BUILD_WRITER=1
          fi

          if [ -n "${MISSING_ROLES}" ] || [ "${MISSING_RT_SA:-0}" = "1" ] || [ "${MISSING_CLOUD_BUILD_WRITER:-0}" = "1" ]; then
            echo "::error title=Missing IAM roles/bindings detected::" \
              "One or more required roles are missing for deployment. Please grant the following and re-run:"
            echo
            echo "Project: $PROJECT_ID"
            echo "Deploy SA: ${GCP_SERVICE_ACCOUNT_EMAIL}"
            echo "Runtime SA: ${RUNTIME_SA}"
            echo "Cloud Build SA: ${CLOUDBUILD_SA}"
            echo
            if [ -n "${MISSING_ROLES}" ]; then
              echo "Missing project roles on ${GCP_SERVICE_ACCOUNT_EMAIL}:"
              printf "%b" "$MISSING_ROLES"
              echo
              echo "Grant (requires Project Owner/Editor):"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/artifactregistry.admin"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/cloudfunctions.developer"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/run.admin"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/cloudbuild.builds.editor"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/datastore.user"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/secretmanager.viewer"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/secretmanager.secretAccessor"
              echo
            fi
            if [ "${MISSING_RT_SA:-0}" = "1" ]; then
              echo "Missing SA User on runtime SA: ${RUNTIME_SA}"
              echo "Grant (requires Project Owner/Editor):"
              echo "gcloud iam service-accounts add-iam-policy-binding ${RUNTIME_SA} --member=serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL} --role=roles/iam.serviceAccountUser"
              echo
            fi
            if [ "${MISSING_CLOUD_BUILD_WRITER:-0}" = "1" ]; then
              echo "Cloud Build SA lacks Artifact Registry writer: ${CLOUDBUILD_SA}"
              echo "Grant (requires Project Owner/Editor):"
              echo "gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:${CLOUDBUILD_SA} --role=roles/artifactregistry.writer"
              echo
            fi
            exit 1
          else
            echo "All required roles/bindings present."
          fi

      # firebase-tools will use ADC from WIF (GOOGLE_APPLICATION_CREDENTIALS) — no --token needed

      - name: Verify access to SENTRY_DSN secret
        shell: bash
        run: |
          set -euo pipefail
          gcloud config set project "$PROJECT_ID" >/dev/null
          if ! gcloud secrets versions list SENTRY_DSN --project "$PROJECT_ID" --format='value(name)' >/dev/null 2>&1; then
            echo "SENTRY_DSN secret missing or not accessible. Ensure it exists with at least one version and grant the deploy service account secretmanager.secretAccessor." >&2
            echo "Service account: ${GCP_SERVICE_ACCOUNT_EMAIL}" >&2
            exit 1
          fi

      - name: Best-effort grant Firestore access to runtime SA
        shell: bash
        run: |
          set -euo pipefail
          gcloud config set project "$PROJECT_ID"
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          echo "Granting roles/datastore.user to ${RUNTIME_SA} (best effort)"
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${RUNTIME_SA}" \
            --role="roles/datastore.user" || true

      - name: Grant Secret Manager access to deploy SA (for functions config resolution)
        shell: bash
        run: |
          set -euo pipefail
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}" \
            --role="roles/secretmanager.viewer" || true
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}" \
            --role="roles/secretmanager.secretAccessor" || true

      - name: Grant Secret Manager access to runtime SA for SENTRY_DSN secret
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          gcloud secrets add-iam-policy-binding SENTRY_DSN \
            --project "$PROJECT_ID" \
            --member "serviceAccount:${RUNTIME_SA}" \
            --role roles/secretmanager.secretAccessor || true

      - name: Verify access to Cloud Functions sources bucket
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
          BUCKET="gcf-sources-${PROJECT_NUMBER}-us-central1"
          echo "Checking access to gs://${BUCKET}"
          if ! gsutil ls -b "gs://${BUCKET}" >/dev/null 2>&1; then
            echo "Bucket gs://${BUCKET} not found yet (will be created automatically on first Gen2 build)." || true
          fi
          if ! gsutil ls "gs://${BUCKET}" >/dev/null 2>&1; then
            echo "Attempting to grant storage.objectViewer on bucket to ${GCP_SERVICE_ACCOUNT_EMAIL} (best effort)"
            gsutil iam ch "serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}:objectViewer" "gs://${BUCKET}" || true
          fi
          if ! gsutil ls "gs://${BUCKET}" >/dev/null 2>&1; then
            echo "Deploy service account lacks read access to gs://${BUCKET}." >&2
            echo "Grant with: gsutil iam ch serviceAccount:${GCP_SERVICE_ACCOUNT_EMAIL}:roles/storage.objectViewer gs://${BUCKET}" >&2
            exit 1
          fi

      # Use Application Default Credentials from WIF; no FIREBASE_TOKEN export

      - name: Deploy Firestore rules (blocking)
        run: |
          set -euo pipefail
          echo "Validating firestore.indexes.json..."
          python3 -m json.tool firestore.indexes.json >/dev/null
          echo "Indexes file is valid JSON. Content preview:"
          head -n 100 firestore.indexes.json || true
          echo "Deploying Firestore RULES with --debug"
          yarn dlx firebase-tools@13.29.0 deploy \
            --only firestore:rules \
            --project "$PROJECT_ID" \
            --non-interactive \
            --debug

      - name: Attempt Firestore indexes deploy (non-blocking)
        id: deploy_indexes
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "Deploying Firestore INDEXES with --debug"
          yarn dlx firebase-tools@13.29.0 deploy \
            --only firestore:indexes \
            --project "$PROJECT_ID" \
            --config firebase.single.json \
            --non-interactive \
            --debug

      - name: Firestore troubleshooting (indexes step failed)
        if: steps.deploy_indexes.outcome == 'failure'
        run: |
          set -euo pipefail
          echo "Dumping first 200 lines of firebase.json and indexes for inspection"
          head -n 200 firebase.json || true
          head -n 200 firestore.indexes.json || true
          echo "Listing current Firestore indexes via gcloud (may require permissions)"
          gcloud firestore indexes composite list --project "$PROJECT_ID" || true
          echo "::warning title=Firestore indexes deploy failed::Functions deploy will continue; investigate the logs above and try the manual command from the job summary."
          echo "If you saw a TypeError reading 'map', it is a known firebase-tools bug with multiple firestore entries; using --config firebase.single.json works around it."

      - name: Deploy Functions (with debug)
        run: |
          yarn dlx firebase-tools@13.29.0 deploy \
            --only functions \
            --project "$PROJECT_ID" \
            --non-interactive \
            --debug

      - name: Verify required callables exist
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking that required callable functions are deployed..."
          OUT=$(yarn dlx firebase-tools@13.29.0 functions:list --project "$PROJECT_ID" --json)
          echo "$OUT" | head -c 2000 || true
          echo "$OUT" | node -e '
            let s = "";
            process.stdin.on("data", d => (s += d)).on("end", () => {
              try {
                const o = JSON.parse(s);
                const arr = Array.isArray(o) ? o : (o.functions || []);
                const ids = arr.map(f => f.id);
                const required = ["createRegistration", "startRegistration", "confirmRegistration", "ensureUserProfile"];
                const missing = required.filter(r => !ids.includes(r));
                console.log("Functions discovered:", ids.join(", "));
                if (missing.length) {
                  console.error("Missing required functions:", missing.join(", "));
                  process.exit(1);
                }
              } catch (e) {
                console.error("Failed to parse functions:list JSON:", e?.message || e);
                process.exit(1);
              }
            });
          '
          echo "All required callables present."

      - name: List deployed functions
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:list \
            --project "$PROJECT_ID" || true

      - name: Tail logs for createUserProfile
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only createUserProfile \
            --project "$PROJECT_ID" || true

      - name: Tail logs for helloWorld (Gen2)
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only helloWorld \
            --project "$PROJECT_ID" || true

      - name: Tail logs for startRegistration (Gen2)
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only startRegistration \
            --project "$PROJECT_ID" || true

      - name: Tail logs for confirmRegistration (Gen2)
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only confirmRegistration \
            --project "$PROJECT_ID" || true

      - name: Tail logs for createRegistration (Gen2)
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only createRegistration \
            --project "$PROJECT_ID" || true

      - name: Tail logs for ensureUserProfile (Gen2)
        if: always()
        run: |
          yarn dlx firebase-tools@13.29.0 functions:log \
            --only ensureUserProfile \
            --project "$PROJECT_ID" || true
